import argparse


def get_argparse():
    parser = argparse.ArgumentParser(description='PyTorch ImageNet Training')
    parser.add_argument('--dataset', default='LFWA',choices=['COCO', 'LFWA'], help='path to dataset')
    parser.add_argument('--data-root', default='dataset/LFWA/lfw', help='path to dataset')
    parser.add_argument('--train-target', default='dataset/LFWA/train_lfwa.txt', help='path to dataset')
    parser.add_argument('--val-target', default='dataset/LFWA/val_lfwa.txt', help='path to dataset')
    parser.add_argument('--height', default=250, type=int, help='img size for training')
    parser.add_argument('--width', default=250, type=int, help='img size for training')
    parser.add_argument('--eval-only', default=False, action='store_true')
    parser.add_argument('--eval-ckpt', default='', type=str)
    parser.add_argument('--drop-path', help='', default=0.1, type=float)
    parser.add_argument('--arch','-a', default='L2L')
    parser.add_argument('--back', default='resnet50')
    parser.add_argument('--head', default='simple')
    parser.add_argument('--model-path', default='./model')
    parser.add_argument('--workers','-j', default=16, type=int, help='number of data loading workers (default: 4)')
    parser.add_argument('--epochs', default=60, type=int,help='number of total epochs to run')
    parser.add_argument('--start-epoch', default=0, type=int, help='manual epoch number (useful on restarts)')
    parser.add_argument('--batch-size','-b',  default=16, type=int)
    parser.add_argument('--optim', default='SGD', type=str, help='optimizer')
    parser.add_argument('--ratio', default=1,type=float, help='')
    parser.add_argument('--qratio', default=1,type=float, help='')
    parser.add_argument('--lratio', default=1,type=float, help='')
    parser.add_argument('--ldropout', default=0.1, type=float, help='initial learning rate')
    parser.add_argument('--lr-ft', default=0.01, type=float, help='initial learning rate')
    parser.add_argument('--lr-new', default=0.01, type=float, help='initial learning rate')
    parser.add_argument('--decay-steps','-ds', default=None, type=int,help='')
    parser.add_argument('--randAug', default=False,action='store_true',help='random augmentation')
    parser.add_argument('--n', default=2,type=int,help='random augmentation')
    parser.add_argument('--m', default=13,type=int,help='random augmentation')
    parser.add_argument('--momentum', default=0.9, type=float,help='momentum')
    parser.add_argument('--weight-decay', default=0.001, type=float, help='weight decay (default: 1e-4)',)
    parser.add_argument('--print-freq','-p', default=391, type=int,help='print frequency (default: 10)')
    parser.add_argument('--gpu', default=0, type=int, help='GPU id to use.')
    parser.add_argument('--seed',default=808987, type=int)
    parser.add_argument('--labeldp',default=0.1, type=float)
    parser.add_argument('--after-norm', default=False, action='store_true')
    parser.add_argument('--bn1d', default=False, action='store_true')
    parser.add_argument('--beta', default=0.5, type=float, help='GPU id to use.')
    parser.add_argument('--mp', default=0.2, type=float, help='GPU id to use.')
    # transformer
    
    parser.add_argument('--visu', default=False, type=bool)
    parser.add_argument('--gumbel', default=False, action='store_true')
    parser.add_argument('--act', default='gelu', type=str)
    parser.add_argument('--hidden-dim', default=2048, type=int)
    parser.add_argument('--dim-forward', default=2048, type=int)
    parser.add_argument('--decN', default=1, type=int)
    parser.add_argument('--decNL', default=2, type=int)
    parser.add_argument('--dropout', default=0.1, type=float,help="Dropout applied in the transformer")
    parser.add_argument('--nheads', default=4, type=int)
    return parser.parse_args()